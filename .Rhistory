textInput("18", value = "Company Value", label = NULL),
textInput("19", value = "Percent Drop in Share", label = NULL),
textInput("20", value = "Regulatory Fines", label = NULL),
textInput("21", value = "Judgments and Settlements", label = NULL),
textInput("22", value = "Contractual Penalties", label = NULL),
textInput("23", value = "PCI Fines", label = NULL)
),
column(2,
p("Minimum"),
numericInput("sec_leg_min", label = NULL, value = 0),
numericInput("sec_hours_aff_min", label = NULL, value = 0),
numericInput("sec_tech_min", label = NULL, value = 0),
numericInput("sec_cust_nt_min", label = NULL, value = 0),
numericInput("sec_nt_cost_min", label = NULL, value = 0),
numericInput("sec_cust_pro_min", label = NULL, value = 0),
numericInput("sec_pro_cost_min", label = NULL, value = 0),
numericInput("sec_resp_min", label = NULL, value = 0),
numericInput("sec_repl_min", label = NULL, value = 0),
numericInput("sec_proj_rev_min", label = NULL, value = 0),
numericInput("sec_per_red_min", label = NULL, value = 0),
numericInput("sec_val_min", label = NULL, value = 0),
numericInput("sec_drop_min", label = NULL, value = 0),
numericInput("sec_reg_min", label = NULL, value = 0),
numericInput("sec_settle_min", label = NULL, value = 0),
numericInput("sec_pen_min", label = NULL, value = 0),
numericInput("sec_PCI_min", label = NULL, value = 0)
),
column(2,
p("Most Likely"),
numericInput("sec_leg_ml", label = NULL, value = 0),
numericInput("sec_hours_aff_ml", label = NULL, value = 0),
numericInput("sec_tech_ml", label = NULL, value = 0),
numericInput("sec_cust_nt_ml", label = NULL, value = 0),
numericInput("sec_nt_cost_ml", label = NULL, value = 0),
numericInput("sec_cust_pro_ml", label = NULL, value = 0),
numericInput("sec_pro_cost_ml", label = NULL, value = 0),
numericInput("sec_resp_ml", label = NULL, value = 0),
numericInput("sec_repl_ml", label = NULL, value = 0),
numericInput("sec_proj_rev_ml", label = NULL, value = 0),
numericInput("sec_per_red_ml", label = NULL, value = 0),
numericInput("sec_val_ml", label = NULL, value = 0),
numericInput("sec_drop_ml", label = NULL, value = 0),
numericInput("sec_reg_ml", label = NULL, value = 0),
numericInput("sec_settle_ml", label = NULL, value = 0),
numericInput("sec_pen_ml", label = NULL, value = 0),
numericInput("sec_PCI_ml", label = NULL, value = 0)
),
column(3,
p("Maximum"),
numericInput("sec_leg_max", label = NULL, value = 0),
numericInput("sec_hours_aff_max", label = NULL, value = 0),
numericInput("sec_tech_max", label = NULL, value = 0),
numericInput("sec_cust_nt_max", label = NULL, value = 0),
numericInput("sec_nt_cost_max", label = NULL, value = 0),
numericInput("sec_cust_pro_max", label = NULL, value = 0),
numericInput("sec_pro_cost_max", label = NULL, value = 0),
numericInput("sec_resp_max", label = NULL, value = 0),
numericInput("sec_repl_max", label = NULL, value = 0),
numericInput("sec_proj_rev_max", label = NULL, value = 0),
numericInput("sec_per_red_max", label = NULL, value = 0),
numericInput("sec_val_max", label = NULL, value = 0),
numericInput("sec_drop_max", label = NULL, value = 0),
numericInput("sec_reg_max", label = NULL, value = 0),
numericInput("sec_settle_max", label = NULL, value = 0),
numericInput("sec_pen_max", label = NULL, value = 0),
numericInput("sec_PCI_max", label = NULL, value = 0)
),
column(1,
p("Confidence"),
numericInput("sec_leg_conf", label = NULL, value = 4),
numericInput("sec_hours_aff_conf", label = NULL, value = 4),
numericInput("sec_tech_conf", label = NULL, value = 4),
numericInput("sec_cust_nt_conf", label = NULL, value = 4),
numericInput("sec_nt_cost_conf", label = NULL, value = 4),
numericInput("sec_cust_pro_conf", label = NULL, value = 4),
numericInput("sec_pro_cost_conf", label = NULL, value = 4),
numericInput("sec_resp_conf", label = NULL, value = 4),
numericInput("sec_repl_conf", label = NULL, value = 4),
numericInput("sec_proj_rev_conf", label = NULL, value = 4),
numericInput("sec_per_red_conf", label = NULL, value = 4),
numericInput("sec_val_conf", label = NULL, value = 4),
numericInput("sec_drop_conf", label = NULL, value = 4),
numericInput("sec_reg_conf", label = NULL, value = 4),
numericInput("sec_settle_conf", label = NULL, value = 4),
numericInput("sec_pen_conf", label = NULL, value = 4),
numericInput("sec_PCI_conf", label = NULL, value = 4)
),
column(1,
p("SLEF%"),
numericInput("sec_leg_SLEF", label = NULL, value = 100, step = 10),
numericInput("sec_hours_aff_SLEF", label = NULL, value = 100, step = 10),
numericInput("sec_tech_SLEF", label = NULL, value = 100, step = 10),
numericInput("sec_cust_nt_SLEF", label = NULL, value = 100, step = 10),
numericInput("sec_nt_cost_SLEF", label = NULL, value = 100, step = 10),
numericInput("sec_cust_pro_SLEF", label = NULL, value = 100, step = 10),
numericInput("sec_pro_cost_SLEF", label = NULL, value = 100, step = 10),
numericInput("sec_resp_SLEF", label = NULL, value = 100, step = 10),
numericInput("sec_repl_SLEF", label = NULL, value = 100, step = 10),
numericInput("sec_proj_rev_SLEF", label = NULL, value = 100, step = 10),
numericInput("sec_rep_red_SLEF", label = NULL, value = 100, step = 10),
numericInput("sec_val_SLEF", label = NULL, value = 100, step = 10),
numericInput("sec_drop_SLEF", label = NULL, value = 100, step = 10),
numericInput("sec_reg_SLEF", label = NULL, value = 100, step = 10),
numericInput("sec_settle_SLEF", label = NULL, value = 100, step = 10),
numericInput("sec_pen_SLEF", label = NULL, value = 100, step = 10),
numericInput("sec_PCI_SLEF", label = NULL, value = 100, step = 10)
)
)
)
)
)
)
server <- function(input, output) {
LEF <-          reactive({rpert(10000, min = input$LEF_min, mode = input$LEF_ml, max = input$LEF_max, shape = input$LEF_conf)})
rev_gen <-      reactive({rpert(10000, min = input$rev_gen_min, mode = input$rev_gen_ml, max = input$rev_gen_max, shape = input$rev_gen_conf)})
hours_aff <-    reactive({rpert(10000, min = input$hours_aff_min, mode = input$hours_aff_ml, max = input$hours_aff_max, shape = input$hours_aff_conf)})
prim_legal <-   reactive({rpert(10000, min = input$prim_legal_min, mode = input$prim_legal_ml, max = input$prim_legal_max, shape = input$prim_legal_conf)})
prim_tech <-    reactive({rpert(10000, min = input$prim_tech_min, mode = input$prim_tech_ml, max = input$prim_tech_max, shape = input$prim_tech_conf)})
prim_repl <-    reactive({rpert(10000, min = input$prim_repl_min, mode = input$prim_repl_ml, max = input$prim_repl_max, shape = input$prim_repl_conf)})
sec_leg <-      reactive({rpert(10000, min = input$sec_leg_min, mode = input$sec_leg_ml, max = input$sec_leg_max, shape = input$sec_leg_conf)})
sec_hours_aff <-reactive({rpert(10000, min = input$sec_hours_aff_min, mode = input$sec_hours_aff_ml, max = input$sec_hours_aff_max, shape = input$sec_hours_aff_conf)})
sec_tech <-     reactive({rpert(10000, min = input$sec_tech_min, mode = input$sec_tech_ml, max = input$sec_tech_max, shape = input$sec_tech_conf)})
sec_cust_nt <-  reactive({rpert(10000, min = input$sec_cust_nt_min, mode = input$sec_cust_nt_ml, max = input$sec_cust_nt_max, shape = input$sec_cust_nt_conf)})
sec_nt_cost <-  reactive({rpert(10000, min = input$sec_nt_cost_min, mode = input$sec_nt_cost_ml, max = input$sec_nt_cost_max, shape = input$sec_nt_cost_conf)})
sec_cust_pro <- reactive({rpert(10000, min = input$sec_cust_pro_min, mode = input$sec_cust_pro_ml, max = input$sec_cust_pro_max, shape = input$sec_cust_pro_conf)})
sec_pro_cost <- reactive({rpert(10000, min = input$sec_pro_cost_min, mode = input$sec_pro_cost_ml, max = input$sec_pro_cost_max, shape = input$sec_pro_cost_conf)})
sec_resp <-     reactive({rpert(10000, min = input$sec_resp_min, mode = input$sec_resp_ml, max = input$sec_resp_max, shape = input$sec_resp_conf)})
sec_repl <-     reactive({rpert(10000, min = input$sec_repl_min, mode = input$sec_repl_ml, max = input$sec_repl_max, shape = input$sec_repl_conf)})
sec_proj_rev <- reactive({rpert(10000, min = input$sec_proj_rev_min, mode = input$sec_proj_rev_ml, max = input$sec_proj_rev_max, shape = input$sec_proj_rev_conf)})
sec_per_red <-  reactive({rpert(10000, min = input$sec_per_red_min, mode = input$sec_per_red_ml, max = input$sec_per_red_max, shape = input$sec_per_red_conf)})
sec_val <-      reactive({rpert(10000, min = input$sec_val_min, mode = input$sec_val_ml, max = input$sec_val_max, shape = input$sec_val_conf)})
sec_drop <-     reactive({rpert(10000, min = input$sec_drop_min, mode = input$sec_drop_ml, max = input$sec_drop_max, shape = input$sec_drop_conf)})
sec_reg <-      reactive({rpert(10000, min = input$sec_reg_min, mode = input$sec_reg_ml, max = input$sec_reg_max, shape = input$sec_reg_conf)})
sec_settle <-   reactive({rpert(10000, min = input$sec_settle_min, mode = input$sec_settle_ml, max = input$sec_settle_max, shape = input$sec_settle_conf)})
sec_pen <-      reactive({rpert(10000, min = input$sec_pen_min, mode = input$sec_pen_ml, max = input$sec_pen_max, shape = input$sec_pen_conf)})
sec_PCI <-      reactive({rpert(10000, min = input$sec_PCI_min, mode = input$sec_PCI_ml, max = input$sec_PCI_max, shape = input$sec_PCI_conf)})
slPlus <-     reactive({sec_leg()+sec_tech()+sec_resp()+sec_repl()+sec_reg()+sec_settle()+sec_pen()+sec_PCI()})
slMult <-     reactive({(rev_gen()*sec_hours_aff())+(sec_cust_nt()*sec_nt_cost())+(sec_cust_pro()*sec_pro_cost())+(sec_proj_rev()*sec_per_red())+(sec_val()*sec_drop())})
sr <-         reactive({slPlus()*slMult()})
plm <-        reactive({((rev_gen()*hours_aff())+prim_legal()+prim_tech()+prim_repl())})
sngl_event <- reactive({plm()+sr()})
risk <-       reactive({(LEF()*plm())+sr()})
output$summary <- renderPrint({summary(risk())})
output$singleEvent <- renderPrint({summary(sngl_event())})
output$plot <-    renderPlot({plot(plm(), xlab = "Simulations", ylab = "Loss", main = "Loss Simulations")})
#output$plot2 <-   renderPlot({hist(risk(), xlab = "Risk", ylab = "Simulations", main = "Risk Simulations")})}
gg <- ggplot(data.frame(risk), aes(x = risk))
gg <- gg + geom_histogram (color = "black", fill = "white")
gg <- gg + theme_bw()
print(gg)
output$plot2 <- renderPlot(gg)
#output$report <- downloadHandler(
# For PDF output, change this to "report.pdf"
#filename = "report.html",
#content = function(file) {
# Copy the report file to a temporary directory before processing it, in
# case we don't have write permissions to the current working dir (which
# can happen when deployed).
#tempReport <- file.path(tempdir(), "report.Rmd")
#file.copy("report.Rmd", tempReport, overwrite = TRUE)
# Set up parameters to pass to Rmd document
#params <- plot(plm())
# Knit the document, passing in the `params` list, and eval it in a
# child of the global environment (this isolates the code in the document
# from the code in this app).
#rmarkdown::render(tempReport, output_file = file(),
#params = params,
#envir = new.env(parent = globalenv())
shinyApp(ui = ui, server = server)
runApp('shinytest2.R')
runApp('shinytest2.R')
library(shiny); runApp('shinytest2.R')
runApp('shinytest2.R')
runApp('shinytest2.R')
runApp('shinytest2.R')
runApp('shinytest2.R')
runApp('shinytest2.R')
runApp('shinytest2.R')
runApp('shinytest2.R')
?reactive
runApp('shinytest2.R')
runApp('shinytest2.R')
runApp('shinytest2.R')
runApp('shinytest2.R')
runApp('shinytest2.R')
runApp('shinytest2.R')
runApp('shinytest2.R')
runApp('shinytest2.R')
runApp('shinytest2.R')
runApp('shinytest2.R')
runApp('shinytest2.R')
runApp('shinytest2.R')
?scale_x_continuous
runApp('shinytest2.R')
runApp('shinytest2.R')
runApp('shinytest2.R')
runApp('shinytest2.R')
runApp('shinytest2.R')
runApp('shinytest2.R')
runApp('shinytest2.R')
runApp('shinytest2.R')
runApp('shinytest2.R')
library(shiny); runApp('shinytest2.R')
library(shiny); runApp('shinytest2.R')
?ggplot
runApp('shinytest2.R')
runApp('shinytest2.R')
runApp('shinytest2.R')
?mainPanel
runApp('shinytest2.R')
runApp('shinytest2.R')
runApp('shinytest2.R')
runApp('shinytest2.R')
library(shiny); runApp('shinytest2.R')
runApp('shinytest2.R')
runApp('shinytest2.R')
runApp('shinytest2.R')
?ggplot
?geom_point
runApp('shinytest2.R')
runApp('shinytest2.R')
runApp('shinytest2.R')
runApp('shinytest2.R')
?list
?plot
runApp('shinytest2.R')
runApp('shinytest2.R')
runApp('shinytest2.R')
runApp('shinytest2.R')
runApp('shinytest2.R')
?plot
runApp('shinytest2.R')
?tabPanel
runApp('shinytest2.R')
?icon
runApp('shinytest2.R')
runApp('shinytest2.R')
runApp('shinytest2.R')
runApp('shinytest2.R')
runApp('shinytest2.R')
runApp('shinytest2.R')
runApp('shinytest2.R')
runApp('shinytest2.R')
runApp('shinytest2.R')
runApp('shinytest2.R')
runApp('shinytest2.R')
runApp('shinytest2.R')
runApp('shinytest2.R')
runApp('shinytest2.R')
runApp('shinytest2.R')
runApp('CALCYUM.R')
?plot
?renderPlot
runApp('CALCYUM.R')
runApp('CALCYUM.R')
?ggplot
runApp('CALCYUM.R')
runApp('CALCYUM.R')
runApp('CALCYUM.R')
runApp('CALCYUM.R')
runApp('CALCYUM.R')
install.packages("dashboard")
install.packages("shinydashboard")
?dashboardPage
library(shinydashboard)
?dashboardPage
runApp('CALCYUM.R')
runApp('CALCYUM.R')
runApp('CALCYUM.R')
runApp('CALCYUM.R')
runApp('CALCYUM.R')
runApp('CALCYUM.R')
runApp('CALCYUM.R')
runApp('CALCYUM.R')
runApp('CALCYUM.R')
runApp('CALCYUM.R')
runApp('CALCYUM.R')
runApp('CALCYUM.R')
runApp('CALCYUM.R')
runApp('CALCYUM.R')
runApp('CALCYUM.R')
runApp('CALCYUM.R')
runApp('CALCYUM.R')
runApp('CALCYUM.R')
runApp('CALCYUM.R')
library(shiny); runApp('CALCYUM.R')
library(shiny); runApp('CALCYUM.R')
library(shiny); runApp('CALCYUM.R')
runApp('CALCYUM.R')
runApp('CALCYUM.R')
runApp('CALCYUM.R')
runApp('CALCYUM.R')
runApp('CALCYUM.R')
?skin
?dashboardPage
runApp('CALCYUM.R')
runApp('CALCYUM.R')
runApp('CALCYUM.R')
runApp('CALCYUM.R')
runApp('CALCYUM.R')
runApp('CALCYUM.R')
runApp('CALCYUM.R')
runApp('CALCYUM.R')
runApp('CALCYUM.R')
runApp('CALCYUM.R')
runApp('CALCYUM.R')
runApp('CALCYUM.R')
runApp('CALCYUM.R')
runApp('CALCYUM.R')
runApp('CALCYUM.R')
runApp('CALCYUM.R')
runApp('CALCYUM.R')
runApp('CALCYUM.R')
?paste0
runApp('CALCYUM.R')
runApp('CALCYUM.R')
runApp('CALCYUM.R')
runApp('CALCYUM.R')
runApp('CALCYUM.R')
runApp('CALCYUM.R')
runApp('CALCYUM.R')
runApp('CALCYUM.R')
runApp('CALCYUM.R')
runApp('CALCYUM.R')
runApp('CALCYUM.R')
?paste0
runApp('CALCYUM.R')
?paste0
runApp('CALCYUM.R')
runApp('CALCYUM.R')
runApp('CALCYUM.R')
runApp('CALCYUM.R')
runApp('CALCYUM.R')
runApp('CALCYUM.R')
runApp('CALCYUM.R')
runApp('CALCYUM.R')
runApp('CALCYUM.R')
runApp('CALCYUM.R')
runApp('CALCYUM.R')
runApp('CALCYUM.R')
runApp('CALCYUM.R')
runApp('CALCYUM.R')
runApp('CALCYUM.R')
runApp('CALCYUM.R')
runApp('CALCYUM.R')
runApp('CALCYUM.R')
runApp('CALCYUM.R')
runApp('CALCYUM.R')
?scales
runApp('CALCYUM.R')
runApp('CALCYUM.R')
runApp('CALCYUM.R')
runApp('CALCYUM.R')
runApp('CALCYUM.R')
runApp('CALCYUM.R')
runApp('CALCYUM.R')
runApp('CALCYUM.R')
runApp('CALCYUM.R')
runApp('CALCYUM.R')
runApp('CALCYUM.R')
runApp('CALCYUM.R')
runApp('CALCYUM.R')
runApp('CALCYUM.R')
runApp('CALCYUM.R')
library(shiny); runApp('CALCYUM.R')
library(shiny); runApp('CALCYUM.R')
runApp('CALCYUM.R')
runApp('CALCYUM.R')
runApp('CALCYUM.R')
runApp('CALCYUM.R')
runApp('CALCYUM.R')
runApp('CALCYUM.R')
runApp('CALCYUM.R')
runApp('CALCYUM.R')
runApp('CALCYUM.R')
runApp('CALCYUM.R')
runApp('CALCYUM.R')
runApp('CALCYUM.R')
runApp('CALCYUM.R')
runApp('CALCYUM.R')
?prettyNum
runApp('CALCYUM.R')
runApp('CALCYUM.R')
runApp('CALCYUM.R')
runApp('CALCYUM.R')
runApp('CALCYUM.R')
runApp('CALCYUM.R')
runApp('CALCYUM.R')
runApp('CALCYUM.R')
runApp('CALCYUM.R')
runApp('CALCYUM.R')
?mode
?mean
?density
runApp('CALCYUM.R')
runApp('CALCYUM.R')
?tableOutput
runApp('CALCYUM.R')
runApp('CALCYUM.R')
runApp('CALCYUM.R')
runApp('CALCYUM.R')
runApp('CALCYUM.R')
runApp('CALCYUM.R')
runApp('CALCYUM.R')
runApp('CALCYUM.R')
runApp('CALCYUM.R')
runApp('CALCYUM.R')
runApp('CALCYUM.R')
runApp('CALCYUM.R')
runApp('CALCYUM.R')
runApp('CALCYUM.R')
runApp('CALCYUM.R')
runApp('CALCYUM.R')
runApp('CALCYUM.R')
runApp('CALCYUM.R')
runApp('CALCYUM.R')
runApp('CALCYUM.R')
runApp('CALCYUM.R')
library(shiny); runApp('CALCYUM.R')
runApp('CALCYUM.R')
runApp('CALCYUM.R')
runApp('CALCYUM.R')
library(shiny); runApp('CALCYUM.R')
library(shinydashboard)
?skin
?dashboardPage
library(shiny); runApp('CALCYUM.R')
?valueBox
runApp('CALCYUM.R')
runApp('CALCYUM.R')
runApp('CALCYUM.R')
?geom_density
?ggplot
runApp('CALCYUM.R')
runApp('CALCYUM.R')
runApp('CALCYUM.R')
runApp('CALCYUM.R')
runApp('CALCYUM.R')
library(shiny); runApp('CALCYUM.R')
runApp('CALCYUM.R')
runApp('CALCYUM.R')
runApp('CALCYUM.R')
runApp('CALCYUM.R')
runApp('CALCYUM.R')
runApp('CALCYUM.R')
runApp('CALCYUM.R')
runApp('CALCYUM.R')
install.packages(c("backports", "curl", "digest", "reshape2", "rprojroot", "yaml"))
install.packages("reticulate")
install.packages("PythonInR")
library(reticulate)
library(PythonInR)
?reticulate
?pythoninR
install.packages("rvest")
library(rvest)
url <- 'https://www.bloomberg.com/research/stocks/private/snapshot.asp?privcapId=24660674'
webpage <- rea_html(url)
webpage <- read_html(url)
industry_data_html <- html_nodes(webpage,'h3.txtC6.floatL')
print(industry_data_html)
industry_data_html <- html_nodes(webpage,'.floatL')
print(industry_data_html)
industry_data_html <- html_nodes(webpage,'.txtC6.floatL')
print(industry_data_html)
industry_data <- html_text(industry_data_html)
print(industry_data)
install.packages("duckduckr")
library(duckduckr)
?`duckduckr-package`
?duckduck_answer
tmp <- duckduck_answer("duckduckgo")
tmp$Abstract
library(PythonInR)
?#!
PythonInR::autodetectPython()
autodetectPython()
# Click "Submit" button -> save data
observeEvent(input$submit, {
if (input$id != "0") {
UpdateData(formData())
} else {
CreateData(formData())
UpdateInputs(CreateDefaultRecord(), session)
}
}, priority = 1)
library(shiny); runApp('CALCYUM.R')
library(rvest)
url <- 'https://duckduckgo.com/?q=!ducky+{risklens.com}+site%3Abloomberg.com
''
''
url <- 'https://duckduckgo.com/?q=!ducky+{risklens.com}+site%3Abloomberg.com'
webpage <- read_html(url)
industry_data_html <- html_nodes(webpage,'.h3.txtC6.floatL')
print(industry_data_html)
print(url)
print(webpage)
?rvest
library(rvest)
google <- read_html("http://google.com", encoding = "ISO-8859-1")
webpage <- read_html(google)
google %>% xml_structure()
google %>% html_nodes("div")
# http://stackoverflow.com/questions/15853204
?html_session
library(shiny); runApp('CALCYUM.R')
runApp('CALCYUM.R')
runApp('CALCYUM.R')
runApp('CALCYUM.R')
install.packages("downloader")
runApp('CALCYUM.R')
runApp('CALCYUM.R')
